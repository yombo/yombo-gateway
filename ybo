#!/usr/bin/env bash

# Starts, stops, and manages basic Gateway items.

if [ "$USER" = "root" ] && [ "$SUDO_USER" == "" ]; then
  echo "This script cannot be run as root directly and must be run"
  echo "as the user owning the Yombo gateway service."
  echo ""
  echo "Logout as root and then:"
  echo "sudo ybo"
  exit
fi

if [ "$SUDO_USER" != "" ]; then
  REALUSER=$SUDO_USER
else
  REALUSER=$USER
fi

SCRIPTPATH="$(dirname "$(readlink -f "$0")")"
rc=$?
if [[ $rc != 0 ]]; then
 SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
fi

WORK_DIR="$HOME/.yombo"
LOGCFGFILE=$WORK_DIR/log/config.log
LOGFILE=$WORK_DIR/log/service.log

function need_sudo {
  if (( EUID != 0 ))
  then
    echo ""
    echo "Error: When performing this command, sudo is required."
    echo "Hint: Run the same same command again with 'sudo' in front:"
    echo ""
    echo "sudo ybo [args]"
    echo ""
    exit 1
  fi
  return 0
}

function usage
{
  printf "usage: ybo [options...]\\n"
  printf "'ybo -help' to see all options\\n"
  return 0
}

function help
{
cat << EOF
Manage and run the Yombo Gateway software

If no options are provided, starts the Yombo software in interactive mode.

ybo [command] [-option(s)]

COMMANDS:
  daemon    Start Yombo Gateway service (called systemctl to start the daemon)
  status    Show the status of the Yombo service
  start     Start Yombo gateway in command line mode
  stop      Stop Yombo gateway
  motd      Show MOTD / URL status
  update    Run update script
  version   Show version
  ---- Cleanup commands, be careful! ----
  removetoml     Removes the toml (config) file
  removesql     Removes the database
  removesqltoml  Removes database and toml (config) file

INSTALLTION:
  Run 'ybo-config -help' for installation and service setup.

OPTIONS:
  -debug [items]     Turn on debug mode.
  -h, -help          Show this message
  -logfile FILE      Change log file location
  -profiler          Enable profiling to profile.out
  -pid_path PATH     Set the pid path location
  -pid_file FILE     Set the pid path filename
  -daemon
  -w DIR             Set data storage directory
  -tacfile FILE      TAC file locaiton

Examples:
  Debugging:
    Turn on debug with with optional selection of what items to debug. The
    items list can be * for all, or a comma separated list of items such as:
    --debug yombo.lib.*,yombo.modules.mymodule.*

Additional Yombo Tools:
  ybo-config - Configure Yombo Gateway service for '$REALUSER'
  ./virtualization/vagrant - Contains provision.sh to setup VirtualBox instance

EOF
}

function show_status
{
    if [ "$SHOW_STATUS" == "true" ]; then
      if [ -e $PID_PATH/$PID_FILE ]; then
        mypid=`cat $PID_PATH/$PID_FILE`
        if kill -0 &>1 > /dev/null $mypid; then
          echo "Yombo gateway appears to be running with pid: $mypid"
          echo ""
          $SCRIPTPATH/scripts/show_motd
          exit 0
        fi
      fi
    fi
    echo "Cannot find Yombo Gateway service."
    exit 0
}

function start_shell {
    # Run a shell command
    eval $RUN_SHELL $ARGUMENTS
}

function remove_toml {
    # Wipe the yombo configs
    rm $WORK_DIR/yombo.toml
    rm $WORK_DIR/etc/yombo_meta.toml
}

function remove_sql {
    # Wipe the yombo configs
    rm $WORK_DIR/var/yombo.sqlite3
}

function remove_sql_toml {
    remove_toml
    remove_sql
}


function start_gateway {
    #Check if PID is running, if it is, then exit gracefully.
    if [ -e $PID_PATH/$PID_FILE ]; then
        mypid=`cat $PID_PATH/$PID_FILE`
        if kill -0 $mypid >/dev/null 2>&1; then
          echo "Yombo Gateway already running with pid: $mypid"
          ybo motd
          exit 1
        fi
    fi

    TACOPTIONS="--pidfile=$PID_PATH/$PID_FILE -n -y $TACFILE"  # Always put nodaemon.

    if [ $DAEMON -eq "1" ]; then
        YOMBO_SERVICE="echo \"$ARGUMENTS\" | $SCRIPTPATH/scripts/yombo_tac.sh $TACOPTIONS --logfile=$LOGFILE &"
        echo "Starting yombo using yombo_tac daemon mode"
#        echo $YOMBO_SERVICE
#        exit
        eval $YOMBO_SERVICE
        exit 0

    else
        YOMBO_SERVICE="echo \"$ARGUMENTS\" | twistd $TACOPTIONS"
        cd $SCRIPTPATH
#        export SSL_CERT_FILE="$(python3 -m certifi)"

        # Check if pyenv is being used and isn't loaded...
        if [ -f ".python-version" ] ; then
          if ! [ -x "$(command -v pyenv)" ]; then
            export PATH="~/.pyenv/bin:$PATH"
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
          fi
        fi
    fi

    echo "Starting yombo, in interactive mode."
    while :
    do
      eval $YOMBO_SERVICE
      OUT=$?
      if [ $OUT != "4" ]; then   # 4 is the exit code to signify a restart
        exit $OUT  # Gateway died for some reason or was told to quit, so, lets exit!
      fi
    done
}

function stop_gateway {
    echo "Attempting to stop Yombo Gateway Service"
    if [ -e $PID_PATH/$PID_FILE ]; then
        mypid=`cat $PID_PATH/$PID_FILE`
        if kill -0 &>1 > /dev/null $mypid; then
            /bin/kill -s SIGTERM "$mypid"
            echo "Requested Yombo Gateway service stop. It take a few moments to stop."
            exit 0
        fi
    fi
    echo "Cannot find Yombo Gateway service."
}

#Base vars
DAEMON=0
DEBUG=false
DEBUG_ITEMS=*
LOGENABLE=0
PID_PATH=$HOME/.yombo/var
PID_FILE=yombo.pid
SHOW_STATUS=false
TACFILE="$SCRIPTPATH/yombo.tac"
RUN_SHELL=
ARGUMENTS=
WORKING_DIR=$HOME/.yombo

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

while true; do
#  echo "Command: $1"
  case "$1" in
    "daemon")
      # Run as daemon (used by systemd)
      RUN="start_gateway"
      DAEMON=1
      shift
      ;;
    "help" | "-h" | "-help" | "--help" | "-?" )
      help
      exit 0
      ;;
    "motd" )
      # Show yombo motd
      RUN="start_shell"
      RUN_SHELL="$SCRIPTPATH/scripts/show_motd"
      shift
      ;;
    "cache" )
      # Clears python cache
      RUN="start_shell"
      RUN_SHELL="$SCRIPTPATH/scripts/clear_cache"
      shift
      ;;
    "status")
      RUN="show_status"
      shift
      ;;
    "start")
      RUN="start_gateway"
      shift
      ;;
    "stop")
      RUN="stop_gateway"
      shift
      ;;
    "version")
      # Show version of yombo.
      VERSION=$("$SCRIPTPATH/scripts/show_version")
      echo "Yombo version: $VERSION"
      exit 0
      ;;
    "removetoml")
      RUN="remove_remove_toml"
      shift
      ;;
    "removesql")
      RUN="remove_sql"
      shift
      ;;
    "removesqltoml")
      RUN="remove_sql_toml"
      shift
      ;;
    "update" )
      # Run the update script
      RUN="start_shell"
      RUN_SHELL="$SCRIPTPATH/scripts/yombo_update"
      shift
      ;;
    "-debug" )
      ARGUMENTS="$ARGUMENTS -debug"
      if [[ "$2" != "" ]]; then
        ARGUMENTS="$ARGUMENTS --debug-items $2"
        shift
      fi
      shift ;;
    "-logfile")
      # Change log file location
      shift
      LOGFILE=$1
      shift
      ;;
    "-pid_path")
      shift
      PID_PATH=$1
      shift
      ;;
    "-pid_file")
      shift
      PID_FILE=$1
      shift
      ;;
    "-profiler")
      # Enable profiling
      echo "enabling profiler"
      ARGUMENTS="$ARGUMENTS --savestats --profiler cprofile -n --profile prof.stats"
      ;;
    "-tacfile")
      # Change TAC file location
      shift
      TACFILE=$1
      shift
      ;;
    "-working_dir"|"-w")
      # Set data storage directory
      shift
      ARGUMENTS="$ARGUMENTS -w $1"
      WORKING_DIR=$1
      shift
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "For help: $0 -h" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
    * ) break ;;
  esac
done

if [ "$RUN" != "" ]; then
  $RUN
  exit 0
fi
