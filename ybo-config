#!/usr/bin/env bash
# Yombo gateway configuration helper, Sets up service/systemctl for debian based systems.

if [ "$USER" = "root" ] && [ "$SUDO_USER" == "" ]; then
  echo "This script cannot be run as root directly and must be run"
  echo "as the user owning the Yombo gateway service."
  echo ""
  echo "Logout as root and then:"
  echo "sudo ybo-config"
  exit
fi

if [ "$RUNAS_USER" != "" ]; then
  REALUSER=$RUNAS_USER
elif [ "$SUDO_USER" != "" ]; then
  REALUSER=$SUDO_USER
else
  REALUSER=$USER
fi

SCRIPTPATH="$(dirname "$(readlink -f "$0")")"
rc=$?
if [[ $rc != 0 ]]; then
 SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
fi

WORK_DIR="/home/$REALUSER/.yombo"
LOGFILE=$WORK_DIR/log/config.log
LOGYBOFILE=$WORK_DIR/log/service.log
VERSION="$($SCRIPTPATH/scripts/show_version)"

# Configurable options
ACCEPT="false"
FORCE="false"

YOMBOVERSION=$($SCRIPTPATH/scripts/show_version)
YOMBOVERSIONHASH=$(git -C "$SCRIPTPATH" log --pretty=format:'%h' -n 1)
YOMBOFULLVERSION="$YOMBOVERSIONHASH-$YOMBOVERSION"


function logonly {
  echo "[$(date +'%D %T')] [$YOMBOFULLVERSION] [$1] $2" >> "$LOGFILE"
  if [ "$SUDO_USER" != "" ]; then
    chown "$REALUSER":"$REALUSER" "$LOGFILE"
  fi
}

function log {
  echo "$2"
  echo "[$(date +'%D %T')] [$YOMBOFULLVERSION] [$1] $2" >> "$LOGFILE"
  if [ "$SUDO_USER" != "" ]; then
    chown "$REALUSER":"$REALUSER" "$LOGFILE"
  fi
}

function info {
  log "info" "$1"
}

function warning {
  log "warning" "$1"
}

function error {
  log "error" "$1"
}

function need_sudo {
  if (( EUID != 0 ))
  then
    echo ""
    echo "Error: ybo-config must be run as root (with sudo) for this request."
    echo "Hint: Run the same same command again with 'sudo' in front:"
    echo ""
    echo "sudo ybo-config [args]"
    echo ""
    exit 1
  fi
  return 0
}

function usage {
  printf "usage: ybo-config [command] [options...]\\n"
  printf "'ybo-config help' to see all options\\n"
  exit 0
}

function help {
cat << EOF
Yombo gateway configuration and setup helper.
ybo-config    version: $VERSION

usage: ybo-config command [options...]

COMMANDS:
  help, -?,      Show this text
    -h, --help

  install          Install Yombo gateway software.
  upgrade          Updates Yombo Gateway software and its dependants.
  svc-uninstall    Disable the yombo.service from systemd and remove the yombo.service file.
  svc-install      Install the systemd yombo.service file and enable it.
  svc-uninstall    Disable the yombo.service from systemd and remove the yombo.service file.
  svc-enable       Enable Yombo service, configures Yombo to run on system startup.
  svc-disable      Disable Yombo service, prevents Yombo from running on system startup.
  sudoers-enable   Enable user access to manage yombo and mosquitto services.
  sudoers-disble   Disable user access to manage yombo and mosquitto services.
  version          Set the Yombo gateway source code branch. **Advanced users only**
                   Option: The version name, eg: master, develop, tagname
  install-bash     Install bash completion scripts.
  log-cfg-clear    Clear configuration log.
  log-ybo-clear    Clear Yombo service log.
  log-cfg-show     Show configuration log.
  log-ybo-show     Show Yombo service log.
  log-cfg-share    Share configuration log.
  log-ybo-share    Share service log.

Additional options:
  -Y, --accept   Always accept prompts.

Additional Yombo Tools:
  ybo - manage Yombo gateway service for '$REALUSER'
EOF
}

function run_command {
  echo "------ STARTING EXTERNAL PROGRAM ------" >> "$LOGFILE"
  echo "$1" >> "$LOGFILE"
  echo "------ STARTING LOG ------" >> "$LOGFILE"
  $1 2>&1 | tee -a "$LOGFILE"
  echo "------ FINISHED EXTERNAL PROGRAM ------" >> "$LOGFILE"
  return 0
}

function svc_install
{
    create_systemd
    sudoers_enable
}

function svc_uninstall
{
    remove_systemd
    sudoers_disable
}


function check_systemd
{
  need_sudo
  if [ ! -f /etc/systemd/system/yombo.service ]; then
    if [ "$ACCEPT" == "true" ]; then
      warning "Systemd service control file is missing."
      create_systemd
      return 0
    else
        while true; do
            read -p "Systemd service control file is missing, do you want to create it? (y/n)" yn
            case $yn in
                [Yy]* )
                  create_systemd
                  return 0
                  break;;
                [Nn]* )cd m
                  echo "Not creating system control file, Yombo will not run automatically."
                  exit 0;;
                * )
                  echo "Please answer y (yes) or n (no)."
                  echo "" ;;
            esac
        done
    fi
  fi
}

function create_systemd
{
  need_sudo
  info "Creating systemd service control file. This will tell your system how"
  info "to start Yombo Gateway when your device starts up."
  cat <<- EOF > /etc/systemd/system/yombo.service
###############################################
# This file is managed by yombo - ybo-config  #
###############################################
#
#
# This file manages the starting and stopping of the Yombo Gateway
#
# For details please check https://yombo.net
#
[Unit]
Description=Yombo Gateway Home Automation: https://yombo.net
After=network.target

[Service]
Type=forking
User=$REALUSER
Group=$REALUSER
WorkingDirectory=/home/$REALUSER/.yombo/
PIDFile=/home/$REALUSER/.yombo/var/yombo.pid
# Enable the following line if you get network-related errors during boot
#ExecStartPre=/usr/bin/sleep 60
# Use `whereis ybo` to determine the path of yombo gateway software
ExecStart=/usr/local/bin/ybo daemon
ExecStop=/usr/local/bin/ybo stop
SendSIGKILL=no
RestartForceExitStatus=100

# on vagrant (vboxfs), disable sendfile https://www.virtualbox.org/ticket/9069
Environment=AIOHTTP_NOSENDFILE=1

[Install]
WantedBy=multi-user.target
EOF
    chmod 644 /etc/systemd/system/yombo.service
    chown root:root  /etc/systemd/system/yombo.service
    systemctl --system daemon-reload
    systemctl enable yombo.service
    echo ""
    info "Systemd service control file created. Run 'sudo systemctl start yombo.service' to start it."
    echo ""
    return 0
}

function remove_systemd
{
    need_sudo
    systemctl stop yombo.service
    systemctl disable yombo.service
    rm /etc/systemd/system/yombo.service
    systemctl --system daemon-reload
}

function svc_enable
{
  need_sudo
  check_systemd
  info "About to enable systemd control of Yombo Gateway."
  run_command "sudo systemctl enable yombo.service"
  info "Yombo Gateway has been disabled from systemd control."
  exit 0
}

function svc_disable
{
  need_sudo

  info "About to disable systemd control of Yombo Gateway."
  run_command "systemctl disable yombo.service"
  info "Yombo Gateway has been disabled from systemd control."
  exit 0
}

function sudoers_enable
{
    info "Updating/creating sudoers file for: $REALUSER"
    cat <<- EOF > /etc/sudoers.d/yombo_$REALUSER
# This file is managed by yombo, use ybo-config to update.

%$REALUSER ALL=NOPASSWD: /bin/systemctl enable yombo.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl disable yombo.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl start yombo.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl stop yombo.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl restart yombo.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl enable yombo
%$REALUSER ALL=NOPASSWD: /bin/systemctl disable yombo
%$REALUSER ALL=NOPASSWD: /bin/systemctl start yombo
%$REALUSER ALL=NOPASSWD: /bin/systemctl stop yombo
%$REALUSER ALL=NOPASSWD: /bin/systemctl restart yombo
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo enable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo disable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo start
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo stop
%$REALUSER ALL=NOPASSWD: /usr/sbin/service yombo restart
%$REALUSER ALL=NOPASSWD: /bin/systemctl enable mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl disable mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl start mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl stop mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl restart mosquitto.service
%$REALUSER ALL=NOPASSWD: /bin/systemctl kill -s HUP mosquitto.service
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto enable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto disable
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto start
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto stop
%$REALUSER ALL=NOPASSWD: /usr/sbin/service mosquitto restart
EOF
    chmod 440 /etc/sudoers.d/yombo_$REALUSER
    chown root:root /etc/sudoers.d/yombo_$REALUSER
}

function sudoers_disable
{
    info "Removing sudoers file for: $REALUSER"
    rm /etc/sudoers.d/yombo_$REALUSER
}

function clear-log {
  if [ ! -f $SHARELOG ];then
    echo "Logfile '$SHARELOG' not found, exiting..."
    return 0
  fi
  if [ "$ACCEPT" == "true" ]; then
    rm $SHARELOG
    echo "Log file deleted: $SHARELOG"
  else
    echo ""
    echo "About to delete: $SHARELOG"
    echo ""
    echo -n "Are you sure you want to permanently delete this log file? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
    rm $SHARELOG
    echo "Log file deleted: $SHARELOG"
    fi
  fi
  return 0
}

function share-log {
  if [ ! -f $SHARELOG ];then
    echo "Logfile '$SHARELOG' not found, exiting..."
    return 0
  fi
  if [ "$ACCEPT" == "true" ]; then
    info "Sharing '$SHARELOG' to Hastebin"
    loglink=$(curl -X POST -s -d "$(cat "$SHARELOG")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
    if [[ $loglink != *"initial"*  ]]; then
      info "Hastebin link: $loglink"
    else
      info "Unable to post to Hastebin, unreachable. Try later or check your network connection."
      return 0
    fi
  else
    echo "This will upload the contents of this log file: $SHARELOG"
    echo "This could include sensitive information."
    echo "If you are unsure about what it contains, you can run 'ybo-config cfg-log|ybo-log' to check."
    echo -n "Are you sure you want to upload this publicly to Hastebin? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
      info "Sharing '$SHARELOG' to Hastebin"
      loglink=$(curl -X POST -s -d "$(cat "$SHARELOG")" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}')
      if [[ $loglink != *"initial"*  ]]; then
        info "Hastebin link: $loglink"
      else
        echo
        info "Unable to post to Hastebin, unreachable. Try later or check your network connection."
        return 0
      fi
    fi
  fi
  return 0
}

function share-log {
  if [ ! -f $SHARELOG ];then
    echo "No log entries found."
    return 0
  fi
  more "$SHARELOG"
  return 0
}

function do_install {
  need_sudo
  info "Calling yombo_install to upgrade the system and install Yombo Gateway software."
  run_command "sudo -H -u $SUDO_USER sudo bash $SCRIPTPATH/scripts/yombo_install"
  info "Finished with system and Yombo Gateway software upgrade."
  return 0
}

function upgrade {
  need_sudo
  if [ "$ACCEPT" == "true" ]; then
    do_upgrade
    echo "Log file deleted: $SHARELOG"
  else
    echo ""
    echo "About to update Yombo Gateway, and it's dependencies."
    echo ""
    echo -n "Are you sure you want to complete this task? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
        do_update
    fi
  fi
  return 0
}

function do_upgrade {
  need_sudo
  info "Calling yombo_update to upgrade the system and Yombo Gateway software."
  run_command "sudo -H -u $SUDO_USER sudo bash $SCRIPTPATH/scripts/yombo_update"
  info "Finished with system and Yombo Gateway software upgrade."
  return 0
}

function upgrade {
  need_sudo
  if [ "$ACCEPT" == "true" ]; then
    do_upgrade
    echo "Log file deleted: $SHARELOG"
  else
    echo ""
    echo "About to update Yombo Gateway, and it's dependencies."
    echo ""
    echo -n "Are you sure you want to complete this task? [N/y] : "
    read -r  RESPONSE
    if [ "$RESPONSE" == "y" ] || [ "$RESPONSE" == "Y" ]; then
        do_update
    fi
  fi
  return 0
}

function bash_completion_install {
  need_sudo
  info "Starting bash completion setup."
  logonly "Starting to instasll /etc/bash_completion.d/ybo-cfg"
  cat <<- EOF > /etc/bash_completion.d/ybo-config
# This file is managed by yombo, use ybo-config to update.

_ybo-config()
{
    local cur prev opts cmdopts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="install-bash install uninstall disable enable sudoers_enable sudoers_disble update version log-cfg-clear log-ybo-clear log-cfg-show log-ybo-show log-cfg-share log-ybo-share help"
    altopts="--accept --help"

    if [[ \${cur} == -* ]] ; then
      COMPREPLY=( \$(compgen -W "\${altopts}" -- \${cur}) )
      return 0
    fi

    COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))
    return 0
}
complete -F _ybo-config ybo-config
EOF
  logonly "info" "Done with /etc/bash_completion.d/ybo-config"
  . /etc/bash_completion.d/ybo-config
  logonly "info" "Starting to instasll /etc/bash_completion.d/ybo-config"
  cat <<- EOF > //etc/bash_completion.d/ybo
# This file is managed by yombo, use ybo-config to update.

_ybo()
{
    local cur prev opts cmdopts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    opts="help -help daemon help motd cache status start stop version removeini removesqlini"
    altopts="-debug -logfile -profiler -pid_path -pid_file -working_dir -help"

    if [[ \${cur} == -* ]] ; then
      COMPREPLY=( \$(compgen -W "\${altopts}" -- \${cur}) )
      return 0
    fi

    COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))
    return 0
}
complete -F _ybo ybo
EOF
  logonly "info" "Done with /etc/bash_completion.d/ybo"
  . /etc/bash_completion.d/ybo
  info "Done with bash completion setup."
  echo ""
  echo "You will need to run these commands to make it work with current session:"
  echo ". /etc/bash_completion.d/ybo"
  echo ". /etc/bash_completion.d/ybo-config"
  echo ""
  . /etc/bash_completion.d/ybo-config
}

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

while [[ $# -gt 0 ]]
do
    COMMAND=$1

    case $COMMAND in
      "svc-disable" )
        RUN="svc_disable"
        shift
        ;;
      "svc-enable" )
        RUN="svc_enable"
        shift
        ;;

      "-H" | "-help" | "--help" | "-h" | "-?" )
        RUN="help"
        shift # past argument
        ;;

      "help" )
        help
        exit 0
        ;;

      "svc-install" )
        RUN="svc_install"
        shift # pass command
        ;;

      "svc-uninstall" )
        RUN="svc_uninstall"
        shift # pass command
        ;;

      "sudoers-enable" )
        RUN="sudoers_enable"
        shift # pass command
        ;;

      "sudoers-disble" )
        RUN="sudoers_disable"
        shift # pass command
        ;;

      "log-cfg-clear" )
        SHARELOG="$LOGFILE"
        RUN="clear-log"
        shift # past argument
        ;;

      "log-ybo-clear" )
        SHARELOG="$LOGFILE"
        RUN="clear-log"
        shift # past argument
        ;;

      "log-cfg-show" )
        SHARELOG="$LOGFILE"
        RUN="show-log"
        shift # past argument
        ;;

      "log-ybo-show" )
        SHARELOG="$LOGYBOFILE"
        RUN="show-log"
        shift # past argument
        ;;

      "log-cfg-share")
        SHARELOG="$LOGFILE"
        RUN="share-log"
        shift # pass command
        ;;

      "log-ybo-share")
        SHARELOG="$LOGYBOFILE"
        RUN="share-log"
        shift # pass command
        ;;

      "bash-install")
        RUN="bash_completion_install"
        shift # pass command
        ;;

      "upgrade")
        RUN="upgrade"
        shift # pass command
        ;;

      "version")
        echo "Yombo version: $YOMBOVERSION, git hash: $YOMBOVERSIONHASH"
        exit 0
        ;;

      # Now the options!
      "-Y"|"-y"|"--accept")
        ACCEPT="true"
        shift # pass command
        ;;

      "-F"|"-f"|"--force")
        FORCE="true"
        shift # pass command
        ;;

      * )
        usage
        exit 0
        ;;
    esac
done

if [ "$RUN" != "" ]; then
  $RUN
  exit 0
fi
