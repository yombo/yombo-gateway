#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
A simple MOTD generator than can be used to update
"""
import argparse
import configparser
from datetime import timedelta
import netifaces
import os
import platform
import subprocess
import re
import sys
import tomlkit as tk


class CN:
    """ Colors, normal"""
    BLACK = '\033[03m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    PURPLE = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    DONE = '\033[0m'


class CB:
    """ Colors, bold"""
    BLACK = '\033[03;1m'
    RED = '\033[31;1m'
    GREEN = '\033[32;1m'
    YELLOW = '\033[33;1m'
    BLUE = '\033[34;1m'
    PURPLE = '\033[35;1m'
    CYAN = '\033[36;1m'
    WHITE = '\033[37;1m'
    DONE = '\033[0m'


class CBU:
    """ Colors, bold"""
    BLACK = '\033[03;1;4m'
    RED = '\033[31;1;4m'
    GREEN = '\033[32;1;4m'
    YELLOW = '\033[33;1;4m'
    BLUE = '\033[34;1;4m'
    PURPLE = '\033[35;1;4m'
    CYAN = '\033[36;1;4m'
    WHITE = '\033[37;1;4m'
    DONE = '\033[0m'

parser = argparse.ArgumentParser()
parser.add_argument('-w', nargs='?', help='Set working directory')
args = parser.parse_args()

if args.w is None:
    data_path = f"{os.path.expanduser('~')}/.yombo"
else:
    data_path = args.w
data_path_exists = os.path.isdir(data_path)

program_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(program_path)
import yombo.constants as constants

git_hash = subprocess.check_output(["git", "-C", program_path, "rev-parse", "--short", "HEAD"]).strip()
git_branch = subprocess.check_output(["git", "-C", program_path, "rev-parse", "--abbrev-ref", "HEAD"]).strip()

yombo_version = f"{constants.VERSION} -- {git_branch.decode('utf-8')}:{git_hash.decode('utf-8')}"

internal_hostnames = []  # might get adulterated later.
ip_addresses = []

interfaces = netifaces.interfaces()
for i in interfaces:
    if i == 'lo' or i.startswith('vir'):
        continue
    iface = netifaces.ifaddresses(i).get(netifaces.AF_INET)
    if iface != None:
        internal_hostnames.append(str(iface[0]['addr']))
        ip_addresses.append(str(iface[0]['addr']))
        # break

if len(internal_hostnames) == 0:
    internal_hostnames = ['localhost']

yombo_toml = 'Not configured'
if data_path_exists is True:
    try:
        toml_file_pointer = open(f"{data_path}/yombo.toml", 'r')
        yombo_toml_meta = tk.parse(toml_file_pointer.read())
        yombo_toml = "Valid"
        try:
            dns_fqdn = yombo_toml_meta["dns"]["fqdn"]
        except:
            dns_fqdn = "None"
        try:
            dns_fqdn = yombo_toml_meta["core"]["externalipaddress"]["v4"]
        except:
            dns_fqdn = "None"
        try:
            dns_fqdn = yombo_toml_meta["dns"]["fqdn"]
        except:
            dns_fqdn = "None"
        try:
            dns_fqdn = yombo_toml_meta["dns"]["fqdn"]
        except:
            dns_fqdn = "None"
        external_ip = yombo_toml_meta.get("core", {}).get("externalipaddress_v4", "None")
        nonsecure_port = yombo_toml_meta.get("webinterface", {}).get("nonsecure_port", 8080)
        secure_port = yombo_toml_meta.get("webinterface", {}).get("secure_port", 8443)
    except IOError as e:
        pass
    except configparser.NoSectionError:
        pass
else:
    dns_fqdn = "None"
    external_ip = "None"
    nonsecure_port = 8080
    secure_port = 8443


if dns_fqdn != "None":
    local = f"http://127.0.0.1:{nonsecure_port}"
    internal = [f"http://internal.{dns_fqdn}:{nonsecure_port}"]
    external = f"https://external.{dns_fqdn}:{secure_port}"
    globaluri = f"http://{dns_fqdn}"
else:
    local = f"http://127.0.0.1:{nonsecure_port}"
    internal = []
    for hostname in internal_hostnames:
        internal.append(f"http://{hostname}:{nonsecure_port}")
    external = "Not available"
    globaluri = "Not available"

data_yombo = {}
data_system = {}
data_system["Hostname"] = str(platform.node())
data_yombo["yombo.toml"] = yombo_toml
data_yombo["Yombo Version"] = yombo_version
data_yombo["FQDN"] = dns_fqdn
data_yombo["From anywhere"] = globaluri
data_yombo["Local"] = local
data_yombo["External"] = external
for i in range(len(internal)):
    if len(internal) == 1:
        data_yombo[f"Internal"] = internal[i];
    else:
        data_yombo[f"Internal {i}"] = internal[i];

with open("/proc/uptime", "r") as f:
    uptime_seconds = float(f.readline().split()[0])
    uptime = timedelta(seconds=uptime_seconds)
data_system["Uptime"] = f"{uptime.days} days, {uptime.seconds//3600} hours, {uptime.seconds//60} minutes"
data_system["Kernel"] = platform.release()

command = "grep -c ^processor /proc/cpuinfo"
cores = subprocess.check_output(command, shell=True).strip().decode()

command = "cat /proc/cpuinfo"
all_info = subprocess.check_output(command, shell=True).strip()
cpu_model = "Unknown"
for line in all_info.split(b"\n"):
    if b"model name" in line:
        cpu_model = re.sub(b".*model name.*:", b"", line, 1).decode("utf-8").strip()
        break
data_system["CPU"] = f"{cores} x {cpu_model}"

if data_path_exists is True:
    df = subprocess.Popen(["df", "-h", data_path], stdout=subprocess.PIPE)
    output = df.communicate()[0].decode("utf-8")
    device, size, used, available, percent, mountpoint = \
        output.split("\n")[1].split()
    data_system["Disk"] = f"{used} Used / {available} Avail"
else:
    data_system["Disk"] = "Data directory not found"

version = sys.version_info
data_system["Python"] = f"{version.major}.{version.minor}.{version.micro} ({version.releaselevel})"

ip_address_base = "IP Address"

for i in range(len(ip_addresses)):
    label = f"{ip_address_base} {i+1}"
    data_system[label] = ip_addresses[i]

data_system["Python"] = f"{version.major}.{version.minor}.{version.micro} ({version.releaselevel})"
# Now convert the dict to a list.
data_formatted = [
    # "",
    # "",
    f"{CBU.WHITE}Yombo Access URLS and details{CB.DONE}",
]

justify_length = max(len(x) for x in data_yombo) + 1
for key, value in data_yombo.items():
    data_formatted.append(f"{CB.RED}{key.ljust(justify_length)}{CB.DONE}: {value}")

data_formatted.append("")
data_formatted.append(f"{CBU.WHITE}System details{CB.DONE}")
justify_length = max(len(x) for x in data_yombo) + 1
for key, value in data_system.items():
    data_formatted.append(f"{CB.RED}{key.ljust(justify_length)}{CB.DONE}: {value}")


print("")
print(f"{CB.BLUE}Yombo Gateway{CB.DONE} Learn more at: https://yombo.net")
print("")

logo = [
" YYYYYYY       YYYYYYY",
" Y:::::Y       Y:::::Y",
" Y:::::Y       Y:::::Y",
" Y::::::Y     Y::::::Y",
" YYY:::::Y   Y:::::YYY",
"    Y:::::Y Y:::::Y   ",
"     Y:::::Y:::::Y    ",
"      Y:::::::::Y     ",
"       Y:::::::Y      ",
"        Y:::::Y       ",
"        Y:::::Y       ",
"        Y:::::Y       ",
"        Y:::::Y       ",
"     YYYY:::::YYYY    ",
"     Y:::::::::::Y    ",
"     YYYYYYYYYYYYY    ",
]

data_len = len(data_formatted)

while data_len > len(logo):
    if len(logo) % 2 == 1:
        logo.insert(0, "                      ")
    else:
        logo.append("                      ")

for logo_idx, logo_elem in enumerate(logo):
    try:
        print(f"{logo_elem}  {data_formatted[logo_idx]}")
    except IndexError:
        print(f"{logo_elem}")
